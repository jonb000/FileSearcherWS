/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * View.java
 *
 * Created on Oct 5, 2011, 1:49:11 PM
 */
package com.javac.filesearcher;

import java.awt.Color;
import java.awt.Desktop;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.net.URI;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.ProgressMonitor;

/**
 * Swing Frame to be the view for the SearchRunner controller.
 * Sets SearchRunner parameters and starts the SearchRunner.
 * Receives ChangeEvents from the SearchRunner to update the view.
 * @author jonb
 */
public class View extends javax.swing.JFrame {

    private final String SEARCH_BUTTON_LABEL = "Search";
    private final String STOP_BUTTON_LABEL = "STOP";
    /**
     * Provides help location on regular expression patterns
     */
    private final String PATTERN_URI = "http://download.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html";
    /**
     * Controller that is given parameter information from the GUI
     * we attach a listener to for update events.
     */
    private final SearchRunner searcher;
    /**
     * General use file chooser - instantiated here and not destroyed
     * so it will keep last selection information.
     */
    private final JFileChooser fileChooser = new JFileChooser();

    /**
     * Constructs the GUI view.  The searcher is injected.
     */
    public View(SearchRunner sr) {

        initComponents();

        //save our searcher controller
        this.searcher = sr;
        //
        //Assign a display data model to the JList
        resultList.setModel(searcher.getDataModel().getAsListModel());
        //
        //add a listener to receive the state of the search thread
        searcher.addPropertyChangeListener(new PropertyChangeListener() {

            public void propertyChange(PropertyChangeEvent pce) {

                if (pce.getPropertyName().equals(SearchRunner.UI_UPDATE)) {
                    updateActiveSearchLabels();
                } else if (pce.getPropertyName().equals(SearchRunner.RUNNER_STOPPED)) {
                    //when the searcher has stopped, update the GUI
                    resultList.setModel(searcher.getDataModel().getAsListModel());
                    updateActiveSearchLabels();
                }


            }
        });

        this.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        searchContentsCheckbox = new javax.swing.JCheckBox();
        ignoreCaseCheckbox = new javax.swing.JCheckBox();
        pathField = new javax.swing.JTextField();
        regexField = new javax.swing.JTextField();
        listPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultList = new javax.swing.JList();
        helpBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        searchBtn = new javax.swing.JButton();
        exitBtn = new javax.swing.JButton();
        recurseCheckbox = new javax.swing.JCheckBox();
        useRegexCheckbox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Search File System"));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 14));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Start Location:");

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 14));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Search For:");

        searchContentsCheckbox.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        searchContentsCheckbox.setText("Search File Contents");
        searchContentsCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchContentsCheckboxActionPerformed(evt);
            }
        });

        ignoreCaseCheckbox.setFont(new java.awt.Font("Lucida Grande", 0, 14));
        ignoreCaseCheckbox.setText("Case  Insensitive");

        pathField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pathFieldMouseClicked(evt);
            }
        });

        regexField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regexFieldActionPerformed(evt);
            }
        });

        listPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("0 Matches"));
        listPanel.setLayout(new java.awt.GridLayout(1, 0));

        resultList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                resultListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(resultList);

        listPanel.add(jScrollPane1);

        helpBtn.setText("Regex Help");
        helpBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpBtnActionPerformed(evt);
            }
        });

        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        exitBtn.setText("Exit");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(429, Short.MAX_VALUE)
                .add(searchBtn)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(exitBtn))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(9, 9, 9)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, exitBtn, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, searchBtn, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        recurseCheckbox.setFont(new java.awt.Font("Lucida Grande", 0, 14));
        recurseCheckbox.setSelected(true);
        recurseCheckbox.setText("Recurse Subdirectories");

        useRegexCheckbox.setText("Use Regex");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(listPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(ignoreCaseCheckbox)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(regexField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 116, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(useRegexCheckbox)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(helpBtn))
                            .add(pathField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE)
                            .add(recurseCheckbox)
                            .add(searchContentsCheckbox))
                        .add(20, 20, 20))))
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(pathField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(regexField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(helpBtn)
                    .add(useRegexCheckbox))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ignoreCaseCheckbox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(searchContentsCheckbox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(recurseCheckbox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(listPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 47, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(jPanel1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Basic regex help by showing the Pattern class
     * 
     * @param evt 
     */
    private void helpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpBtnActionPerformed
        try {
            Desktop.getDesktop().browse(new URI(PATTERN_URI));
        } catch (Exception ex) {
        }
    }//GEN-LAST:event_helpBtnActionPerformed

    /**
     * Simple terminate on exit
     * @param evt 
     */
    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        System.exit(-1);
    }//GEN-LAST:event_exitBtnActionPerformed

    /**
     * Begin the search
     * @param evt 
     */
    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        doSearch();
    }

    /**
     * Dual function, if we are currently in a search, stop, or if not, 
     * update the parameters and begin the search.  Called by both the search
     * button and the action of the regex field.
     */
    private void doSearch() {
        if (searcher.isRunning()) {
            searcher.stop();
            listPanel.revalidate();
        } else {
            searcher.clear();
            resultList.setModel(searcher.getDataModel().getAsListModel());
            if (searcher.getStartPath().equals("")) {
                popupMsg("Error in Start Location", "Start Location not specified.");
                return;
            }

            //configure the searcher
            try {
                searcher.setSearchString(regexField.getText(), useRegexCheckbox.isSelected());
            } catch (Exception ex) {
                popupMsg("Invalid Regular Expression", "Invalid Regular Expression: " + regexField.getText() + ex.getLocalizedMessage());
                return;
            }
            searcher.setSearchFileContents(searchContentsCheckbox.isSelected());
            searcher.setIgnoreCase(ignoreCaseCheckbox.isSelected());
            searcher.setRecurseSubdirs(recurseCheckbox.isSelected());

            //
            //This takes awhile - get out of the swing event thread
            javax.swing.SwingUtilities.invokeLater(new Runnable() {

                public void run() {
                    searcher.start();
                }
            });


        }
        updateActiveSearchLabels();
    }//GEN-LAST:event_searchBtnActionPerformed

    /**
     * For more advanced desktops like OSX, will permit the opening of the
     * default tool on the selected path
     * 
     * @param evt 
     */
    private void resultListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_resultListValueChanged
        try {
            Desktop.getDesktop().browse(new URI("file://" + resultList.getSelectedValue().toString()));
        } catch (Exception ex) {
        }
    }//GEN-LAST:event_resultListValueChanged

    /**
     * Open a file chooser and set the parameter in the searcher
     * 
     * @param evt 
     */
    private void pathFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pathFieldMouseClicked
        searcher.getDataModel().clear();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fileChooser.showOpenDialog(View.this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            pathField.setText(file.getAbsolutePath());
            try {
                searcher.setStartPath(file);
            } catch (Exception ex) {
                popupMsg("Bad File", ex.getLocalizedMessage());
            }

        }
    }//GEN-LAST:event_pathFieldMouseClicked

    /**
     * A return <CR> in the field invokes the search
     * 
     * @param evt 
     */
    private void regexFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regexFieldActionPerformed
        doSearch();
    }//GEN-LAST:event_regexFieldActionPerformed

    /**
     * Returns the get contents message, including the max file size currently set
     * @return 
     */
    private String getContentsNote() {
        return "Contents Searching: Only files with a length less than \n"
                + searcher.getMaxContentFileSize() / 1024000 + "MB are examined.  If using a regular expression,"
                + "\nthe expression must match an entire line of the file."
                + "\n\nFor example, to search for the word 'foo' use .*foo.*\n\n";
    }
    private void searchContentsCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchContentsCheckboxActionPerformed
        if (this.searchContentsCheckbox.isSelected()) {
            this.popupMsg("Search Contents Note", getContentsNote());
        }
    }//GEN-LAST:event_searchContentsCheckboxActionPerformed

    /**
     * Based on the status of the search, updates the UI labels
     */
    private void updateActiveSearchLabels() {
        if (searcher.isRunning()) {
            searchBtn.setText(STOP_BUTTON_LABEL);
        } else {
            searchBtn.setText(SEARCH_BUTTON_LABEL);
        }
        listPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(searcher.getDataModel().size() + " Matched - Searched " + searcher.getFileCount() + " Files, " + searcher.getDirCount() + " Directories"));

    }

    /**
     * Convenience routine to popup a user message
     * @param title
     * @param msg 
     */
    private void popupMsg(String title, String msg) {
        JOptionPane.showMessageDialog(View.this, msg, title, JOptionPane.INFORMATION_MESSAGE);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exitBtn;
    private javax.swing.JButton helpBtn;
    private javax.swing.JCheckBox ignoreCaseCheckbox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel listPanel;
    private javax.swing.JTextField pathField;
    private javax.swing.JCheckBox recurseCheckbox;
    private javax.swing.JTextField regexField;
    private javax.swing.JList resultList;
    private javax.swing.JButton searchBtn;
    private javax.swing.JCheckBox searchContentsCheckbox;
    private javax.swing.JCheckBox useRegexCheckbox;
    // End of variables declaration//GEN-END:variables
}
